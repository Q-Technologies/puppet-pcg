#!/bin/bash
################################################################################
#
# Process inputs
#
################################################################################

if [[ -z $4 ]]; then
    echo "Please specify the 'App Name' 'Network Zone' 'Network Name' 'DataCentre/Location' 'App Sub Env' ['Stack Name' 'Puppet Role' 'Puppet Env'] as arguments to the script"
    exit 1
fi

# The main application the server runs
app_name=${1:?}
# The network zone
network_zone=${2:?}
case $network_zone in
<%= $valid_network_zones %>)
    ;;
*)
    echo "That doesn't look like a valid Network Zone"
    exit 1
    ;;
esac
# The network name
network_name=${3:?}
case $network_name in
<%= $valid_network_names %>)
    ;;
*)
    echo "That doesn't look like a valid Network Type"
    exit 1
    ;;
esac
# The datacentre
location=${4:?}
case $location in
<%= $valid_sites %>)
    ;;
*)
    echo "That doesn't look like a valid Datacentre"
    exit 1
    ;;
esac
# The sub environment it runs - only put one!
app_sub_env=${5:?}
case $app_sub_env in
<%= join( keys( $app_sub_envs ), '|' ) %>)
    ;;
*)
    echo "That doesn't look like a valid sub environment"
    exit 1
    ;;
esac
# The environment can be derived from the sub environment
case $app_sub_env in
<% $app_sub_envs.each | $sub_env, $props | { -%>
<%   if $app_sub_envs[$sub_env]['env'] == 'development' { -%>
<%=    "$sub_env|" -%>
<%   } -%>
<% } -%>
xxxxxxx)
    env=development
    ;;
<% $app_sub_envs.each | $sub_env, $props | { -%>
<%   if $app_sub_envs[$sub_env]['env'] == 'test' { -%>
<%=    "$sub_env|" -%>
<%   } -%>
<% } -%>
stg|uat)
    env=test
    ;;
<% $app_sub_envs.each | $sub_env, $props | { -%>
<%   if $app_sub_envs[$sub_env]['env'] == 'production' { -%>
<%=    "$sub_env|" -%>
<%   } -%>
<% } -%>
xxxxxxx)
    env=production
    ;;
*)
    echo "Could not find the Application environment"
    exit 1
    ;;
esac

# Find the application sub environment instance
stack_name=${6}

# Find the puppet role
puppet_role=${7}
if [[ -z $puppet_role ]]; then
    puppet_role=base
fi

# Find the puppet environment
puppet_environment=${8}
if [[ -z $puppet_environment ]]; then
    puppet_environment=${env:?}
fi

# Determine the type of Hosting platform we are running on
if [[ -f /sys/hypervisor/uuid ]] && [[ `head -c 3 /sys/hypervisor/uuid` == ec2 ]]; then
    hosting_type=AWS
elif [[ $(lsmod | grep -c vmw) > 0 ]] || [[ $(lspci | grep -ci vmware) > 0 ]] || [[ $(virt-what) = "vmware" ]]; then
    hosting_type=VMware
else
    hosting_type=Physical
fi



################################################################################
#
# Remove any old agents and add the new one with important facts in place
#
################################################################################
umask 022
rpm -e puppet-agent 2>/dev/null
rm -rf /etc/puppetlabs /opt/puppetlabs

# Gather some environmental info
hostname=$(hostname -s | tr '[:upper:]' '[:lower:]')
domain=$(hostname -d  | tr '[:upper:]' '[:lower:]')
if [[ -z $PCG_USER ]]; then
    user=$(who -m | awk '{print $1}')
else
    user=$PCG_USER
fi
if [[ -z $PCG_PROVISIONER ]]; then
    method="Manual"
else
    method=$PCG_PROVISIONER
fi
certname=$hostname.$domain

csr_d="/etc/puppetlabs/puppet"
csr_f=${csr_d:?}"/csr_attributes.yaml"
mkdir -p ${csr_d:?}
(
cat << EOF
extension_requests:
  # pp_uuid 	Puppet Node UUID
  #1.3.6.1.4.1.34380.1.1.1: ''
  # pp_instance_id 	Puppet Node Instance ID
  #1.3.6.1.4.1.34380.1.1.2: ''
  # pp_image_name 	Puppet Node Image Name
  #1.3.6.1.4.1.34380.1.1.3: ''
  # pp_preshared_key 	Puppet Node Preshared Key
  #1.3.6.1.4.1.34380.1.1.4: ''
  # pp_cost_center 	Puppet Node Cost Center Name
  #1.3.6.1.4.1.34380.1.1.5: ''
  # pp_product 	Puppet Node Product Name
  #1.3.6.1.4.1.34380.1.1.6: ''
  # pp_project  Puppet Node Project Name
  #1.3.6.1.4.1.34380.1.1.7: ''
  # pp_application  Puppet Node Application Name
  1.3.6.1.4.1.34380.1.1.8:  ${app_name:?}
  # pp_service 	Puppet Node Service Name
  #1.3.6.1.4.1.34380.1.1.9: ''
  # pp_employee 	Puppet Node Employee Name
  #1.3.6.1.4.1.34380.1.1.10: ''
  # pp_created_by  Puppet Node created_by Tag
  1.3.6.1.4.1.34380.1.1.11: ${user:?}
  # pp_environment  Puppet Node Environment Name
  1.3.6.1.4.1.34380.1.1.12: ${puppet_environment:?}
  # pp_role   Puppet Node Role Name
  1.3.6.1.4.1.34380.1.1.13: ${puppet_role:?}
  # pp_software_version 	Puppet Node Software Version
  #1.3.6.1.4.1.34380.1.1.14: ''
  # pp_department 	Puppet Node Department Name
  #1.3.6.1.4.1.34380.1.1.15: ''
  # pp_cluster 	Puppet Node Cluster Name
  #1.3.6.1.4.1.34380.1.1.16: ''
  # pp_provisioner   Puppet Node Provisioner Name
  1.3.6.1.4.1.34380.1.1.17: ${method:?}
  # pp_region 	Puppet Node Region Name
  #1.3.6.1.4.1.34380.1.1.18: ''
  # pp_datacenter  Puppet Node Datacenter Name
  1.3.6.1.4.1.34380.1.1.19: ${location:?}
  # pp_zone  Puppet Node Zone Name
  1.3.6.1.4.1.34380.1.1.20: ${network_zone:?}
  # pp_network  Puppet Node Network Name
  1.3.6.1.4.1.34380.1.1.21: ${network_name:?}
  # pp_securitypolicy  Puppet Node Security Policy Name
  #1.3.6.1.4.1.34380.1.1.22: ''
  # pp_cloudplatform  Puppet Node Cloud Platform Name
  1.3.6.1.4.1.34380.1.1.23: ${hosting_type:?}
  # pp_apptier    Puppet Node Application Tier
  1.3.6.1.4.1.34380.1.1.24: ${app_sub_env:?}
  # pp_hostname 	Puppet Node Hostname
  #1.3.6.1.4.1.34380.1.1.25: ''
EOF
) > ${csr_f:?}

# Only put the stack name into the CSR if it exists
if [[ ! -z $stack_name ]]; then
(
cat << EOF
  # pp_stack_name 	Application Stack Name
  1.3.6.1.4.1.34380.1.2.1: $stack_name
EOF
) >> ${csr_f:?}
fi

facts_d="/etc/puppetlabs/facter/facts.d"
mkdir -p ${facts_d:?}
#echo "tgt_puppet_env=${tgt_puppet_env:?}"   > ${facts_d}/tgt_puppet_env.txt

if [[ -z $PCG_PP_MASTER ]]; then
    PP_MASTER=puppet
else
    PP_MASTER=$PCG_PP_MASTER
fi

if [[ $(grep -ci precise /etc/os-release) -gt 0 ]]; then
    cd /tmp
    curl -O <%= $repo_server %>/repo/packages/misc/deb/x86_64/puppet-agent_1.9.3-1precise_amd64.deb    
    dpkg -i puppet-agent_1.9.3-1precise_amd64.deb
    /bin/rm puppet-agent_1.9.3-1precise_amd64.deb
    ln -s /opt/puppetlabs/puppet/bin/puppet /usr/local/bin/
    ln -s /opt/puppetlabs/puppet/bin/facter /usr/local/bin/
    puppet config set --section main server ${PP_MASTER}
    puppet config set --section agent certname ${certname:?}
else
    # Arguments should be of the form: <section>:<setting>=<value>
    curl -k https://${PP_MASTER}:8140/packages/current/install.bash > /tmp/puppet_install.sh
    bash /tmp/puppet_install.sh "main:server=${PP_MASTER}" "agent:certname=${certname:?}"
fi

